cmake_minimum_required(VERSION 3.10)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
project(RtreeRepo VERSION 1.0
    LANGUAGES C CXX
)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
OPTION(BUILD_FOR_WINDOWS "build dll for windows" OFF)
OPTION(BUILD_FOR_ANDROID "build dll for android" OFF)
OPTION(BUILD_FOR_APPLE "build dll for apple" ON)
set(BIN "easyRTree")
add_executable(${BIN} "test.cpp")
IF(BUILD_FOR_WINDOWS)
  message(STATUS "BUILD FOR WINDOWS")
  add_definitions(-DBENTLEY_WIN32=1)
  add_compile_definitions(BENTLEY_WIN32)
  add_definitions(-DBENTLEY_WINRT)
  add_compile_definitions(BENTLEY_WINRT)
  add_definitions(-D_WINDOWS_=1)
ELSEIF(BUILD_FOR_APPLE)
  message(STATUS "BUILD FOR APPLE")
  add_definitions(-D__APPLE__)
  add_compile_definitions(__APPLE__)
  # 设置CMake工具链文件
  # set(CMAKE_TOOLCHAIN_FILE ${CMAKE_CURRENT_SOURCE_DIR}/../ios-cmake/ios.toolchain.cmake)
  set(CMAKE_TOOLCHAIN_FILE /Users/onesight/shenghang/ios-cmake/ios.toolchain.cmake )
  set(CMAKE_OSX_DEPLOYMENT_TARGET "10.0")  # 或者更高版本
  set(PLATFORM "OS64")  # 或使用 OS64COMBINED 以生成包含模拟器和设备的 FAT 库
  # set(PLATFORM "OS64COMBINED")
  set(CMAKE_OSX_ARCHITECTURES "arm64;armv7;x86_64")
ENDIF()

IF(BUILD_FOR_ANDROID)
  message(STATUS "BUILD FOR ANDROID")
  add_definitions(-DANDROID)
  add_compile_definitions(ANDROID)
  # 设置编译目标为Android
  set(CMAKE_SYSTEM_NAME Android)
  set(CMAKE_SYSTEM_VERSION 21) # 设置Android API级别
  # 链接Android日志库

  set(ICU_INCLUDE_DIR "${ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include")
  if(${ANDROID_ABI} STREQUAL "arm64-v8a")
    set(ICU_LIB_PATH "${ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/lib/aarch64-linux-android/34")
  elseif(${ANDROID_ABI} STREQUAL "armeabi-v7a")
    set(ICU_LIB_PATH "${ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/lib/arm-linux-androideabi/34")
  elseif(${ANDROID_ABI} STREQUAL "x86")
    set(ICU_LIB_PATH "${ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/lib/i686-linux-android/34")
  elseif(${ANDROID_ABI} STREQUAL "x86_64")
    set(ICU_LIB_PATH "${ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/lib/x86_64-linux-android/34")
  endif()
  find_library(icu-lib icu)
  message(STATUS "icu-lib is ${icu-lib}")
  add_definitions(-DBETHREAD_USE_PTHREAD=1)
  add_compile_definitions(BETHREAD_USE_PTHREAD)
  message(STATUS "BETHREAD_USE_PTHREAD aba")
  message(STATUS "ANDROID_ABI is ${ANDROID_ABI}")

#  message(STATUS "ICU_LIB_PATH is ${ICU_LIB_PATH}")
#  list(APPEND CMAKE_PREFIX_PATH ${ICU_LIB_PATH})
#  find_package(ICU REQUIRED COMPONENTS uc i18n)
#  target_link_libraries(nang ICU::uc ICU::i18n)
#  find_package(ICU REQUIRED COMPONENTS uc i18n PATHS ${ICU_LIB_PATH} NO_DEFAULT_PATH)
  #find_package(ICU REQUIRED COMPONENTS uc)
  #target_link_libraries(nang ICU::uc)
#  find_library(ICU_UC_LIBRARY NAMES icuuc libicuuc PATHS ${ICU_LIB_PATH} NO_DEFAULT_PATH)
#  find_library(ICU_I18N_LIBRARY NAMES icui18n libicui18n PATHS ${ICU_LIB_PATH} NO_DEFAULT_PATH)

#  if(ICU_UC_LIBRARY AND ICU_I18N_LIBRARY)
#    add_library(ICU::uc UNKNOWN IMPORTED)
#    set_target_properties(ICU::uc PROPERTIES IMPORTED_LOCATION ${ICU_UC_LIBRARY})
#    add_library(ICU::i18n UNKNOWN IMPORTED)
#    set_target_properties(ICU::i18n PROPERTIES IMPORTED_LOCATION ${ICU_I18N_LIBRARY})
#  else()
#    message(FATAL_ERROR "ICU libraries not found")
#  endif()
  include_directories(${ANDROID_NDK}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include)
ENDIF()


# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++20")

if(MSVC)
    # 使用MSVC编译器的优化选项
    # add_compile_options(/O2)
    # shenghang modify /O2, need be unhidden.
    # include(mdl.mki)
else()
    # 使用GCC或Clang的优化选项
    add_compile_options(-O3)
    add_compile_options(-fPIC)
endif()
add_definitions(-DSQLITE_DQS=0)
add_definitions(-DSQLITE_DEFAULT_MEMSTATUS=0)
add_definitions(-DSQLITE_DEFAULT_WAL_SYNCHRONOUS=1)
add_definitions(-DSQLITE_LIKE_DOESNT_MATCH_BLOBS)
add_definitions(-DSQLITE_MAX_EXPR_DEPTH=0)
add_definitions(-DSQLITE_OMIT_DECLTYPE)
add_definitions(-DSQLITE_OMIT_DEPRECATED)
add_definitions(-DSQLITE_OMIT_PROGRESS_CALLBACK)
add_definitions(-DSQLITE_OMIT_SHARED_CACHE)
add_definitions(-DSQLITE_USE_ALLOCA)
add_definitions(-DSQLITE_USE_URI)
add_definitions(-DSQLITE_ENABLE_RTREE)
add_definitions(-D__BENTLEYDLL_BUILD__=1)
# add_definitions(-DNDEBUG)
if(NOT uppercase_CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE RELEASE)
  set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Os -s")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Os -s")
elseif(uppercase_CMAKE_BUILD_TYPE MATCHES "DEBUG")
  add_definitions(-DDEBUG)
#   set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address -fsanitize-recover=all -fsanitize=leak")
endif()
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
message (STATUS "CMAKE_CURRENT_SOURCE_DIR is ${CMAKE_CURRENT_SOURCE_DIR}")
message ("PROJECT_SOURCE_DIR is ${PROJECT_SOURCE_DIR}")
add_subdirectory(RtreeRepo)

set_target_properties(${BIN} PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
)
# set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedDLL$<$<CONFIG:Debug>:DebugDLL>")
# find_library(SHLWAPI_LIBRARY shlwapi)
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party)
target_link_libraries(${BIN} RtreeRepo)
